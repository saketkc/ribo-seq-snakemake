include:
    'configs/config_Feb_2017_Radiation_GBM.py'

workdir: OUT_DIR

from itertools import chain
from os.path import join
import glob
import re

SAMPLES = glob.glob('{}/*.fastq.gz'.format(RAWDATA_DIR), recursive=False)
SAMPLES = sorted([sample.replace('{}/'.format(RAWDATA_DIR),'').replace('.fastq.gz','') for sample in SAMPLES])
#STRANDS = ['pos', 'neg', 'both']
STRANDS = ['both']
#ENDTYPE = ['5prime', '3prime', 'either']
ENDTYPE = ['5prime']
print(SAMPLES)

rule all:
    input:
        expand('qc/{sample_name}_fastqc.html', sample_name=SAMPLES),
        expand('inferred_experiment/{sample}.txt', sample=SAMPLES),
        expand('preprocessed/{sample_name}_trimmed.fq.gz', sample_name=SAMPLES),
        expand('mapped/bams/{sample_name}.bam', sample_name=SAMPLES),
        'mapped/featureCounts/byCDS/fcounts.CDS.tsv',
        'mapped/featureCounts/byExon/fcounts.exon.tsv',
        expand('mapped/HTSeq/byExon/{sample}.exon.counts.tsv', sample=SAMPLES),
        expand('mapped/HTSeq/byCDS/{sample}.CDS.counts.tsv', sample=SAMPLES),
        'multiqc_report/multiqc_report.html',
        expand('pickled_data/{sample}.coverage_start_codons.pickle', sample=SAMPLES),
        expand('pickled_data/{sample}.coverage.pickle', sample=SAMPLES),
        expand('pickled_data/{sample}.fragment_lengths.pickle', sample=SAMPLES),
        expand('pickled_data/{sample}.coverage_gene.pickle', sample=SAMPLES),
        expand('mapped/bedGraphs/{sample}.{endtype}.{strand}.bedGraph', sample=SAMPLES,
                                                                             endtype=ENDTYPE,
                                                                             strand=STRANDS),

        expand('mapped/bigWigs/{sample}.{endtype}.{strand}.bw', sample=SAMPLES,
                                                                     endtype=ENDTYPE,
                                                                     strand=STRANDS),
        expand('metagene_pickled_data_UTR5/{sample}.{endtype}.{strand}_metagene_normalized.pickle', sample=SAMPLES,
                                                                     endtype=ENDTYPE,
                                                                     strand=STRANDS),
        expand('metagene_pickled_data_CDS_offset60/{sample}.{endtype}.{strand}_metagene_normalized.pickle', sample=SAMPLES,
                                                                     endtype=ENDTYPE,
                                                                     strand=STRANDS),
        expand('metagene_pickled_data_UTR3/{sample}.{endtype}.{strand}_metagene_normalized.pickle', sample=SAMPLES,
                                                                     endtype=ENDTYPE,
                                                                     strand=STRANDS),


rule create_index:
    input:
        GENOME_FASTA,
        GTF
    output: STAR_INDEX
    threads: 15
    shell:
        r'''mkdir -p {output} && STAR --runThreadN 15\
            --runMode genomeGenerate \
            --genomeDir {output} \
            --genomeFastaFiles {input[0]}\
            --sjdbGTFfile {input[1]}'''

rule perform_qc:
    input:
        R1=RAWDATA_DIR + '{sample_name}.fastq.gz',
    params:
        out_dir = 'qc'
    output:
       'qc/{sample_name}_fastqc.html',
       'qc/{sample_name}_fastqc.zip',
    shell:
        r'''
            fastqc -o {params.out_dir} -f fastq {input.R1}
        '''

rule perfom_trimming:
    input:
        R1=RAWDATA_DIR + '{sample_name}.fastq.gz',
    params:
        out_dir='preprocessed/',
        phred_cutoff=5
    output:
        'preprocessed/{sample_name}_trimmed.fq.gz',
    shell:
        r'''
            trim_galore -o {params.out_dir} -q {params.phred_cutoff} {input.R1}
        '''

rule map_star:
    input:
        R1='preprocessed/{sample_name}_trimmed.fq.gz',
        index=STAR_INDEX
    output:
        bam='mapped/bams/{sample_name}.bam',
        counts='mapped/STARcounts/{sample_name}.counts'
    params:
        prefix = 'mapped/bams/{sample_name}',
        unmapped = 'unmapped/fastq/{sample_name}',
        starlogs = 'mapped/starlogs'
    threads: 15
    shell:
        r'''
        STAR --runThreadN {threads}\
             --genomeDir {input.index}\
             --outFilterMismatchNmax 2\
             --outFileNamePrefix {params.prefix} --readFilesIn {input.R1}\
             --outSAMtype BAM SortedByCoordinate\
             --readFilesCommand zcat\
             --quantMode GeneCounts\
             --outReadsUnmapped {params.unmapped} && mv {params.prefix}Aligned.sortedByCoord.out.bam {output.bam} && samtools index {output.bam}\
             && mv {params.prefix}ReadsPerGene.out.tab {output.counts}\
             && mkdir -p {params.starlogs} && mv {params.prefix}Log.final.out {params.prefix}Log.out {params.prefix}Log.progress.out {params.starlogs}
        '''


rule sort_by_name:
    input: 'mapped/bams/{sample}.bam'
    output: 'mapped/bams/{sample}.sortedByName.bam'
    shell:
        r'''
            samtools sort -on {input} -T /tmp/ -o {output} && samtools index {output}
        '''

rule count_exon_rna:
    input: 'mapped/bams/{sample}.sortedByName.bam'
    params:
        annotation=GTF,
        phred_cutoff=5
    output: 'mapped/HTSeq/byExon/{sample}.exon.counts.tsv'
    run:
        shell(r'''source activate {PYTHON2ENV} && htseq-count --order=name --format=bam --mode=intersection-strict --stranded=yes --minaqual={params.phred_cutoff} --type=exon --idattr=gene_id {input} {params.annotation} > {output}''')

rule count_cds:
    input: 'mapped/bams/{sample}.sortedByName.bam'
    params:
        annotation=GTF,
        phred_cutoff=5
    output: 'mapped/HTSeq/byCDS/{sample}.CDS.counts.tsv'
    run:
        shell(r'''source activate {PYTHON2ENV} && htseq-count --order=name --format=bam --mode=intersection-strict --stranded=yes --minaqual={params.phred_cutoff} --type=CDS --idattr=gene_id {input} {params.annotation} > {output}''')


rule format_counts:
    input: 'mapped/HTSeq/byExon/{sample}.exon.counts.tsv'
    output: 'mapped/HTSeq/byExon/{sample}.counts.noversion.tsv'
    shell:
        r'''
        cat {input} | sed -E 's/\.[0-9]+//' > {output}

        '''

rule format_counts_cds:
    input: 'mapped/HTSeq/byCDS/{sample}.CDS.counts.tsv'
    output: 'mapped/HTSeq/byCDS/{sample}.CDS.counts.noversion.tsv'
    shell:
        r'''
        cat {input} | sed -E 's/\.[0-9]+//' > {output}

        '''


rule featurecounts_ribo:
    input: expand('mapped/bams/{sample}.sortedByName.bam', sample=set(SAMPLES))
    params:
        annotation=GTF
    output: 'mapped/featureCounts/byExon/fcounts.exon.tsv'
    threads: 15
    shell:
        r'''featureCounts -s 1 -a {params.annotation} -o {output} -t exon -g gene_id -Q 4 -T {threads} {input}'''

rule featurecounts_cds:
    input: expand('mapped/bams/{sample}.sortedByName.bam', sample=set(SAMPLES))
    params:
        annotation=GTF
    output: 'mapped/featureCounts/byCDS/fcounts.CDS.tsv'
    threads: 15
    shell:
        r'''featureCounts -s 1 -a {params.annotation} -o {output} -t CDS -g gene_id -Q 4 -T {threads} {input}'''


rule format_fcounts_ribo:
    input: 'mapped/featureCounts/fcounts.ribo.tsv'
    output: 'mapped/featureCounts/fcounts.ribo.noversion.tsv'
    shell:
        r'''
        cat {input} | sed -E 's/\.[0-9]+//' > {output}

        '''
    output: 'mapped/featureCounts/fcounts.ribo.noversion.tsv'


rule run_picardmetrics:
    input: 'mapped/bams/{sample}.bam'
    output: 'mapped/bam_metrics/{sample}.metrics'
    shell:
        r'''
        picard CollectInsertSizeMetrics I={input} H={output}.insertsize.pdf O={output}

        '''

rule run_deseq:
    input: expand('mapped/HTSeq/byCDS/{sample}.CDS.counts.noversion.tsv', sample=SAMPLES)
    output:
        'mapped/DE_analysis/HTSeq/'+GENOME_BUILD+'.HTSeq.DESeq2.all.tsv',
        'mapped/DE_analysis/HTSeq/'+GENOME_BUILD+'.HTSeq.DESeq2.sig.tsv'

    params:
        basedir = 'mapped/HTSeq/byCDS',
        inprefix = 'CDS.counts.noversion',
        gene_annotations  = GENE_NAMES,
        outprefix = 'mapped/DE_analysis/HTSeq/'+GENOME_BUILD+'.HTSeq'
    shell:
        r'''
        Rscript {SRC_DIR}/do_DE_analysis.R --basedir={params.basedir} \
            --gene_annotations={params.gene_annotations} \
            --design_file={DESIGN_FILE} \
            --outprefix={params.outprefix} \
            --inprefix={params.inprefix}

        '''

rule run_deseq_featureCounts:
    input: 'mapped/featureCounts/fcounts.noversion.tsv'
    output:
        'mapped/DE_analysis/featureCounts/'+GENOME_BUILD+'.featureCounts.DESeq2.all.tsv',
        'mapped/DE_analysis/featureCounts/'+GENOME_BUILD+'.featureCounts.DESeq2.sig.tsv'
    params:
        gene_annotations  = GENE_NAMES,
        outprefix = 'mapped/DE_analysis/featureCounts/'+GENOME_BUILD+'.featureCounts'
    shell:
        r'''
        Rscript {SRC_DIR}/do_DE_analysis_featureCounts.R --counts={input} \
            --gene_annotations={params.gene_annotations} \
            --design_file={DESIGN_FILE} \
            --outprefix={params.outprefix}

        '''

rule create_insertsize_tsv:
    input: 'mapped/bam_metrics/{sample}.metrics'
    output: 'mapped/bam_metrics/{sample}.insertsizes.tsv'
    shell:
        r'''
        python {SRC_DIR}/collect_picard_metrics.py {input} {output}

        '''

rule counts_to_tpm:
    input:
        count = expand('mapped/HTSeq/byExon/{sample}.counts.noversion.tsv', sample=SAMPLES),
        insert_size = expand('mapped/bam_metrics/{sample}.insertsizes.tsv', sample=SAMPLES),
    output:
        'mapped/tpm/masterTPM.tsv'
    params:
        gene_lengths=GENE_LENGTHS,
        name=expand('{sample}', sample=SAMPLES),
        outprefix='mapped/tpm',
        gene_map=GENE_NAMES
    run:
        counts_input = (',').join(input.count)
        sizes_input = (',').join(input.insert_size)
        names = (',').join(params.name)
        shell('Rscript {SRC_DIR}/counts_to_tpm.R --counts={counts_input} --insert_sizes={sizes_input} --gene_lengths={params.gene_lengths} --inprefix={names} --gene_map={params.gene_map} --outprefix={params.outprefix}')

rule plot_tpm:
    input: 'mapped/tpm/masterTPM.tsv'
    output: 'mapped/plots/tpm_scatter/{sample1}_VS_{sample2}.png'
    params:
        prefix = 'mapped/plots/tpm_scatter/'
    shell:
        r'''
        python {SRC_DIR}/plot_tpm_scatter.py --master {input} --outprefix  {params.prefix}
        '''

rule perform_qualimap_qc:
    input:  'mapped/bams/{sample}.bam',
    output: 'mapped/post_mapping_qualimap/{sample}/qualimapReport.html',
    params:
        outdir='mapped/post_mapping_qualimap/{sample}',
        gtf=GTF
    shell:
        r'''
        qualimap rnaseq -bam {input} -gtf {params.gtf} --outdir {params.outdir} --java-mem-size=8G

        '''

rule get_duplication_estimate:
    input:  'mapped/bams/{sample}.bam'
    output: 'mapped/post_mapping_deduplication/{sample}/output.DupRate_plot.r'
    params:
        outprefix='mapped/post_mapping_deduplication/{sample}/output'
    shell:
        r'''
        source activate {PYTHON2ENV} && read_duplication.py -i {input} -o {params.outprefix}
        '''

rule bam_to_sam:
    input: 'mapped/bams/{sample}.bam'
    output: 'mapped/sams/{sample}.sam'
    shell:
        r'''
        samtools view -h -o {output} {input}

        '''

rule infer_experiment:
    input: 'mapped/sams/{sample}.sam'
    output: 'inferred_experiment/{sample}.txt'
    shell:
        r'''
        source activate {PYTHON2ENV} && infer_experiment.py -r {GENE_BED} -i {input} 2>&1 > {output} 
        '''

rule run_multiqc:
    input:
        expand('qc/{sample_name}_fastqc.html', sample_name=SAMPLES),
        expand('mapped/post_mapping_deduplication/{sample}/output.DupRate_plot.r', sample=SAMPLES),
        expand('mapped/post_mapping_qualimap/{sample}/qualimapReport.html', sample=SAMPLES),
        expand('mapped/bams/{sample}.bam', sample=SAMPLES),
        #'mapped/DE_analysis/HTSeq/'+GENOME_BUILD+'.HTSeq.DESeq2.sig.tsv',
        #'mapped/DE_analysis/featureCounts/'+GENOME_BUILD+'.featureCounts.DESeq2.sig.tsv',
    output:
        'multiqc_report/multiqc_report.html'
    shell:
        'export LC_ALL=en_US.UTF-8 && multiqc -f --outdir multiqc_report .'


rule count_coverage:
    input: 'mapped/bams/{sample}.bam'
    output: 'pickled_data/{sample}.coverage.pickle'
    shell:
        r'''source activate {PYTHON2ENV} && python {SRC_DIR}/coverage.py {input} {output}'''

rule count_fragment_lengths:
    input: 'mapped/bams/{sample}.bam'
    output: 'pickled_data/{sample}.fragment_lengths.pickle'
    shell:
        r'''source activate {PYTHON2ENV} && python {SRC_DIR}/query_lengths.py {input} {output}'''

rule count_coverage_start_codons:
    input: 'mapped/bams/{sample}.bam'
    output: 'pickled_data/{sample}.coverage_start_codons.pickle'
    shell:
        r'''source activate {PYTHON2ENV} && python {SRC_DIR}/coverage_startcodons.py {input} {output} {START_CODON_BED} {STOP_CODON_BED}'''

rule count_coverage_gene:
    input: 'mapped/bams/{sample}.bam'
    output: 'pickled_data/{sample}.coverage_gene.pickle'
    shell:
        r'''source activate {PYTHON2ENV} \
        && python {SRC_DIR}/coverage_gene.py {input} {output} {CDS_BED}'''

rule count_coverage_all:
    input: 'mapped/bams/{sample}.bam'
    params:
        strand = '{strand}',
        endtype = '{endtype}'
    output:
        bg = 'mapped/bedGraphs/{sample}.{endtype}.{strand}.bedGraph',
        bw = 'mapped/bigWigs/{sample}.{endtype}.{strand}.bw',
    run:
        if params.endtype == '5prime':
            extra_args = '-5'
        elif params.endtype == '3prime':
            extra_args = '-3'
        elif params.endtype == 'either':
            extra_args = ''
        if params.strand == 'both':
            shell(r''' bedtools genomecov -ibam {input} -bg {extra_args} > {output.bg}\
            && bedSort {output.bg} {output.bg} \
            && bedGraphToBigWig {output.bg} {CHROM_SIZES} {output.bw}''')
        elif params.strand == 'pos':
            shell(r''' bedtools genomecov -ibam {input} -bg -strand + {extra_args} > {output.bg}\
            && bedSort {output.bg} {output.bg} \
            && bedGraphToBigWig {output.bg} {CHROM_SIZES} {output.bw}''')
        elif params.strand == 'neg':
            shell(r''' bedtools genomecov -ibam {input} -bg -strand - {extra_args} > {output.bg}\
            && bedSort {output.bg} {output.bg} \
            && bedGraphToBigWig {output.bg} {CHROM_SIZES} {output.bw}''')


rule count_coverage_lengthfiltered:
    input: 'length_filtered_bam/{length_range}/{sample}.{length_range}.bam'
    params:
        strand = '{strand}',
        endtype = '{endtype}'
    output:
        bg = 'mapped/bedGraphs_length_filtered/{length_range}/{sample}.{endtype}.{strand}.bedGraph',
        bw = 'mapped/bigWigs_length_filtered/{length_range}/{sample}.{endtype}.{strand}.bw'
    run:
        if params.endtype == '5prime':
            extra_args = '-5'
        elif params.endtype == '3prime':
            extra_args = '-3'
        elif params.endtype == 'either':
            extra_args = ''
        if params.strand == 'both':
            shell(r''' bedtools genomecov -ibam {input} -bg {extra_args} > {output.bg}\
            && bedSort {output.bg} {output.bg} \
            && bedGraphToBigWig {output.bg} {CHROM_SIZES} {output.bw}''')
        elif params.strand == 'pos':
            shell(r''' bedtools genomecov -ibam {input} -bg -strand + {extra_args} > {output.bg}\
            && bedSort {output.bg} {output.bg} \
            && bedGraphToBigWig {output.bg} {CHROM_SIZES} {output.bw}''')
        elif params.strand == 'neg':
            shell(r''' bedtools genomecov -ibam {input} -bg -strand - {extra_args} > {output.bg}\
            && bedSort {output.bg} {output.bg} \
            && bedGraphToBigWig {output.bg} {CHROM_SIZES} {output.bw}''')

rule genelevel_normalized_counts:
    input: 'mapped/bigWigs/{sample}.{endtype}.{strand}.bw'
    output:
        metagene = 'mapped/metagene_pickled_data/{sample}.{endtype}.{strand}_metagene.pickle',
    params:
        prefix = 'mapped/metagene_pickled_data/{sample}.{endtype}.{strand}'
    shell:
        r'''source activate {PYTHON2ENV} && python {SRC_DIR}/coverage_bigwig_cds.py {input} {CDS_BED} {params.prefix}'''

rule genelevel_normalized_counts_utr5:
    input:
        bw = 'mapped/bigWigs/{sample}.{endtype}.{strand}.bw',
        htseq = 'mapped/HTSeq/byCDS/{sample}.CDS.counts.tsv'
    version: '0.2.0'
    output:
        metagene = 'metagene_pickled_data_UTR5/{sample}.{endtype}.{strand}_metagene_normalized.pickle',
    resources:
        mem_mb=60000
    params:
        prefix = 'metagene_pickled_data_UTR5/{sample}.{endtype}.{strand}',
        offset = 0,
        top_n_meta = 1000,
        top_n_gene = 50,
    shell:
        r'''
        source activate {PYTHON2ENV} && \
        python {SRC_DIR}/metagene_counter.py --bigwig {input.bw} \
        --htseq_f {input.htseq} \
        --region_bed_f {UTR5_BED} \
        --master_offset {params.offset} \
        --top_n_meta {params.top_n_meta} \
        --top_n_gene {params.top_n_gene} \
        --prefix {params.prefix}
        '''



rule genelevel_normalized_counts_utr3:
    input:
        bw = 'mapped/bigWigs/{sample}.{endtype}.{strand}.bw',
        htseq = 'mapped/HTSeq/byCDS/{sample}.CDS.counts.tsv'
    version: '0.2.0'
    output:
        metagene = 'metagene_pickled_data_UTR3/{sample}.{endtype}.{strand}_metagene_normalized.pickle',
    resources:
        mem_mb=60000
    params:
        prefix = 'metagene_pickled_data_UTR3/{sample}.{endtype}.{strand}',
        offset = 0,
        top_n_meta = 1000,
        top_n_gene = 50,
    shell:
        r'''
        source activate {PYTHON2ENV} && \
        python {SRC_DIR}/metagene_counter.py --bigwig {input.bw} \
        --htseq_f {input.htseq} \
        --region_bed_f {UTR3_BED} \
        --master_offset {params.offset} \
        --top_n_meta {params.top_n_meta} \
        --top_n_gene {params.top_n_gene} \
        --prefix {params.prefix}
        '''


rule genelevel_normalized_counts_cds_offset60:
    input:
        bw = 'mapped/bigWigs/{sample}.{endtype}.{strand}.bw',
        htseq = 'mapped/HTSeq/byCDS/{sample}.CDS.counts.tsv'
    version: '0.2.0'
    output:
        metagene = 'metagene_pickled_data_CDS_offset60/{sample}.{endtype}.{strand}_metagene_normalized.pickle',
    resources:
        mem_mb=60000
    params:
        prefix = 'metagene_pickled_data_CDS_offset60/{sample}.{endtype}.{strand}',
        offset = 60,
        top_n_meta = 1000,
        top_n_gene = 50,
    shell:
        r'''
        source activate {PYTHON2ENV} && \
        python {SRC_DIR}/metagene_counter.py --bigwig {input.bw} \
        --htseq_f {input.htseq} \
        --region_bed_f {CDS_BED} \
        --master_offset {params.offset} \
        --top_n_meta {params.top_n_meta} \
        --top_n_gene {params.top_n_gene} \
        --prefix {params.prefix}
        '''

