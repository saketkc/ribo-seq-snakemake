include:
    '../configs/config_HuR_Penalva_L_01182017.human.isoformlevel.py'
workdir: OUT_DIR

SAMPLE_NAMES_RNA = ['HepG2_Control_1_S7',
                    'HepG2_Control_2_S9',
                    'HepG2_Control_6_S11',
                    'HepG2_HuR_KD_1_S8',
                    'HepG2_HuR_KD2_S10',
                    'HepG2_HuR_KD_6_S12']
LANE_NAMES_RNA = ['L001', 'L002', 'L003', 'L004']
SAMPLE_NAMES_RIBO = ['HepG2_Control_1_S19',
                     'HepG2_Control_2_S21',
                     'HepG2_Control_6_S23',
                     'HepG2_HuR_KD_1_S20',
                     'HepG2_HuR_KD_2_S22',
                     'HepG2_HuR_KD_6_S24']

print(RAWDATA_DIR_RNA)

rule all:
    input:
        CDS_RANGE_FILE,
        STAR_INDEX_DIR+'/contaminant/fasta/contaminant.fa',
        STAR_INDEX_DIR+'/contaminant/index',
        STAR_INDEX_DIR + '/pcDNA/index',
        expand('qc/rna/{sample_name}_{lane}_R1_001_fastqc.html', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        expand('qc/rna/{sample_name}_{lane}_R2_001_fastqc.html', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        expand('preprocessed/rna/{sample_name}/{sample_name}_{lane}_R1_001_val_1.fq.gz', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        expand('preprocessed/rna/{sample_name}/{sample_name}_{lane}_R2_001_val_2.fq.gz', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        #expand('unmapped/rna/{sample_name}_{lane}.R1.fq', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        #expand('unmapped/rna/{sample_name}_{lane}.R2.fq', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        expand('mapped/bams/rna/{sample_name}/{sample_name}_{lane}.bam', zip, sample_name=SAMPLE_NAMES_RNA, lane=LANE_NAMES_RNA),
        expand('mapped/merged_bams/rna/{sample_name}.bam', sample_name=SAMPLE_NAMES_RNA),
        expand('qc/ribo/{sample_name}_L004_R1_001_fastqc.html', sample_name=SAMPLE_NAMES_RIBO),
        expand('preprocessed/ribo/{sample_name}_L004_R1_001_trimmed.fq.gz', sample_name=SAMPLE_NAMES_RIBO),
        #expand('mapped/bams/ribo/{sample_name}.bam', sample_name=SAMPLE_NAMES_RIBO),



rule cds_range_file:
    input:
        gtf = GTF,
        cdna_fa = pcDNA_FASTA,
        cds_fa = CDS_FASTA,
    output: 
        CDS_RANGE_FILE,
        pcDNA_FASTA_FILTERED,
        CDS_FASTA_FILTERED
    shell:
        r'''source activate clipseq2 && python {SRC_DIR}/third-party/ribomap/filter_gencode_transcript.py {input.gtf} {input.cdna_fa} {input.cds_fa}'''


rule build_contaminants:
    input:
        gtf = GTF,
        cdna_fa = pcDNA_FASTA,
        ncrna_fa = ncRNA_FASTA,
        trna_fa = tRNA_FASTA,
    output:
        STAR_INDEX_DIR+'/contaminant/fasta/contaminant.fa'
    shell:
        r'''source activate clipseq2 && python {SRC_DIR}/third-party/ribomap/build_contaminant.py \
        {input.ncrna_fa} {input.trna_fa} Homo_sapiens {output}'''

rule index_contaminant:
    input: STAR_INDEX_DIR+'/contaminant/fasta/contaminant.fa'
    output: STAR_INDEX_DIR+'/contaminant/index'
    threads: 16
    shell:
        r'''mkdir -p {output} && STAR --runThreadN {threads} --runMode genomeGenerate  \
           --genomeDir {output} --genomeFastaFiles {input} \
           --genomeSAindexNbases 8 --genomeChrBinNbits 11
        '''

rule index_cdna:
    input: pcDNA_FASTA_FILTERED
    output: STAR_INDEX_DIR + '/pcDNA/index'
    threads: 16
    shell:
        r'''mkdir -p {output} && STAR --runThreadN {threads} --runMode genomeGenerate  \
           --genomeDir {output} --genomeFastaFiles {input} \
           --genomeSAindexNbases 8 --genomeChrBinNbits 11
        '''


rule perform_qc_ribo:
    input:
        R1=RAWDATA_DIR_RIBO+'/{sample_name}_L004_R1_001.fastq.gz',
    params:
        out_dir = 'qc/ribo'
    output:
       'qc/ribo/{sample_name}_L004_R1_001_fastqc.html',
       'qc/ribo/{sample_name}_L004_R1_001_fastqc.zip',
    shell:
        r'''
            fastqc -o {params.out_dir} -f fastq {input.R1}
        '''

rule perfom_trimming_ribo:
    input:
        R1=RAWDATA_DIR_RIBO+'/{sample_name}_L004_R1_001.fastq.gz',
    params:
        out_dir='preprocessed/ribo/',
        phred_cutoff=5
    output:
        'preprocessed/ribo/{sample_name}_L004_R1_001_trimmed.fq.gz',
    shell:
        r'''
            trim_galore -o {params.out_dir} -q {params.phred_cutoff} {input.R1}
        '''

rule filter_contaminant_ribo:
    input:
        R1='preprocessed/ribo/{sample_name}/{sample_name}_L004_R1_001_trimmed.fq.gz',
        cont_idx = STAR_INDEX_DIR+'/contaminant/index/'
    output:
        R1='unmapped/ribo/{sample}.R1.fq',
    params:
        prefix='unmapped/ribo/{sample}'

    threads: 16
    shell:
        r'''
            STAR --runThreadN {threads} --genomeDir {input.cont_idx} \
                --readFilesCommand zcat \
                --readFilesIn {input} --outFileNamePrefix {params.outprefix} \
                --outStd SAM --outReadsUnmapped Fastx \
            && mv {params.prefix}Unmapped.out.mate1 {output.R1}

        '''

rule map_to_tx_ribo:
    input:
        R1='unmapped/ribo/{sample}.R1.fq',
        t_idx = STAR_INDEX_DIR + '/pcDNA/index',
    output:
    params:
        prefix = 'mapped/bams/rna/{sample}',
        starlogs = 'mapped/starlogs'
    threads: 16
    shell:
        r'''STAR --runThreadN {threads} --genomeDir ${input.index} \
            --readFilesIn {input.R1} \
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outFileNamePrefix  {params.prefix} \
            && mv {params.prefix}Aligned.sortedByCoord.out.bam {output} &&\
            mkdir -p {params.starlogs} && mv {params.prefix}Log.final.out {params.prefix}Log.out {params.prefix}Log.progress.out {params.starlogs}
        '''


rule perform_qc_rna:
    input:
        R1=RAWDATA_DIR_RNA+'/{sample_name}_{lane}_R1_001.fastq.gz',
        R2=RAWDATA_DIR_RNA+'/{sample_name}_{lane}_R2_001.fastq.gz'
    params:
        out_dir = 'qc/rna'
    output:
       'qc/rna/{sample_name}_{lane}_R1_001_fastqc.html',
       'qc/rna/{sample_name}_{lane}_R1_001_fastqc.zip',
       'qc/rna/{sample_name}_{lane}_R2_001_fastqc.html',
       'qc/rna/{sample_name}_{lane}_R2_001_fastqc.zip',
    shell:
        r'''
            fastqc -o {params.out_dir} -f fastq {input.R1} {input.R2}
        '''

rule perfom_trimming_rna:
    input:
        R1=RAWDATA_DIR_RNA+'/{sample_name}_{lane}_R1_001.fastq.gz',
        R2=RAWDATA_DIR_RNA+'/{sample_name}_{lane}_R2_001.fastq.gz'
    params:
        out_dir='preprocessed/rna/{sample_name}',
        phred_cutoff=5
    output:
        'preprocessed/rna/{sample_name}/{sample_name}_{lane}_R1_001_val_1.fq.gz',
        'preprocessed/rna/{sample_name}/{sample_name}_{lane}_R2_001_val_2.fq.gz',
    shell:
        r'''
            trim_galore --paired -o {params.out_dir} -q {params.phred_cutoff} {input.R1} {input.R2}
        '''

rule filter_contaminant_rna:
    input:
        R1='preprocessed/rna/{sample_name}/{sample_name}_{lane}_R1_001_val_1.fq.gz',
        R2='preprocessed/rna/{sample_name}/{sample_name}_{lane}_R2_001_val_2.fq.gz',
        cont_idx = STAR_INDEX_DIR+'/contaminant/index/'
    output:
        R1='unmapped/rna/{sample_name}_{lane}.R1.fq',
        R2='unmapped/rna/{sample_name}_{lane}.R2.fq',
    params:
        prefix='unmapped/rna/{sample_name}_{lane}'
    threads: 16
    shell:
        r'''
            STAR --runThreadN {threads} --genomeDir {input.cont_idx} \
                --readFilesCommand zcat \
                --readFilesIn {input.R1} {input.R2} --outFileNamePrefix {params.prefix} \
                --outStd SAM --outReadsUnmapped Fastx --outSAMmode NoQS  > /dev/null \
            && mv {params.prefix}Unmapped.out.mate1 {output.R1} && mv {params.prefix}Unmapped.out.mate2 {output.R2}
        '''


"""
rule map_to_tx_rna:
    input:
        R1='unmapped/rna/{sample_name}_{lane}.R1.fq',
        R2='unmapped/rna/{sample_name}_{lane}.R2.fq',
        index = STAR_INDEX_DIR + '/pcDNA/index',
    output: 'mapped/bams/rna/{sample_name}/{sample_name}_{lane}.bam',
    params:
        prefix = 'mapped/bams/rna/{sample_name}_{lane}',
        starlogs = 'mapped/starlogs',
        tmp_prefix = '/staging/as/skchoudh/tmp/{sample_name}_{lane}'
    threads: 16
    shell:
        r'''STAR --runThreadN {threads} --genomeDir {input.index} \
            --readFilesIn {input.R1} {input.R2}\
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outFileNamePrefix  {params.prefix} \
            --outTmpDir {params.tmp_prefix} \
            && mv {params.prefix}Aligned.sortedByCoord.out.bam {output} &&\
            mkdir -p {params.starlogs} && mv {params.prefix}Log.final.out {params.prefix}Log.out {params.prefix}Log.progress.out {params.starlogs}
        '''
"""

rule map_to_tx_rna:
    input:
        R1='preprocessed/rna/{sample_name}/{sample_name}_{lane}_R1_001_val_1.fq.gz',
        R2='preprocessed/rna/{sample_name}/{sample_name}_{lane}_R2_001_val_2.fq.gz',
        index = STAR_INDEX_DIR + '/pcDNA/index',
    output: 'mapped/bams/rna/{sample_name}/{sample_name}_{lane}.bam',
    params:
        prefix = 'mapped/bams/rna/{sample_name}_{lane}',
        starlogs = 'mapped/starlogs',
        tmp_prefix = '/staging/as/skchoudh/tmp/{sample_name}_{lane}'
    threads: 16
    shell:
        r'''STAR --runThreadN {threads} --genomeDir {input.index} \
            --readFilesIn {input.R1} {input.R2}\
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outFileNamePrefix  {params.prefix} \
            --outTmpDir {params.tmp_prefix} \
            && mv {params.prefix}Aligned.sortedByCoord.out.bam {output} &&\
            mkdir -p {params.starlogs} && mv {params.prefix}Log.final.out {params.prefix}Log.out {params.prefix}Log.progress.out {params.starlogs}
        '''

#"""
rule merge_bams:
    input: expand('mapped/bams/rna/{{sample_name}}/{{sample_name}}_{lane}.bam', lane=set(LANE_NAMES_RNA))
    output: 'mapped/merged_bams/rna/{sample_name}.bam'
    run:
        cmd = ' -in '.join(input)
        shell(r'''bamtools merge -in {cmd} -out {output}''')

rule run_salmon:
    input:
        transcript=pcDNA_FASTA,
        bam = 'mapped/merged_bams/rna/{sample_name}.bam'
    params:
        outdir='mapped/quant/'
    output:
        'mapped/quant/quant.sf'
    threads: 16
    shell:
        r'''
        salmon quant -t {input.transcript} -l U -a {input.bam} -o {params.outdir} -p {threads} --biasCorrect
        '''


rule run_ribomap:
    input:
        rna = expand('mapped/merged_bams/rna/{sample}.bam', sample=SAMPLE_NAMES_RIBO),
        ribo = expand('mapped/bams/ribo/{sample}.bam', sample=SAMPLE_NAMES_RIBO)
    output: expand('riboprof/{rna}_{ribo}', zip, rna=SAMPLE_NAMES_RNA, ribo=SAMPLE_NAMES_RIBO)

    run:
        for x,y,o in zip(input.rna, input.ribo, output):
            shell('''riboprof --fasta {pcDNA_FASTA} --mrnabam {x} --ribobam {y} --min_fplen=22 --max_fplen=33 --offset 12 --sf {input.sf} --tabd_cutoff 0 --out {o}''')
