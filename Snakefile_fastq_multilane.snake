include:
    'configs/config_Musashi1_Penalva_L_12212016.human.py'

workdir: OUT_DIR

from itertools import chain
from os.path import join
import glob
import re

SAMPLES = glob.glob('{}**/*.fastq.gz'.format(RAWDATA_DIR), recursive=True)
SAMPLE_LANE = []
for sample in SAMPLES:
    sample = sample.replace('{}/'.format(RAWDATA_DIR),'')
    sample_name = re.split(r'_L\d\d\d_', sample)[0]
    lane_name = re.search(r'L\d\d\d', sample).group()
    SAMPLE_LANE.append((sample_name, lane_name))

SAMPLE_LANE = set(SAMPLE_LANE)
SAMPLE_LANE = sorted(SAMPLE_LANE, key=lambda tup: tup[0])
SAMPLE_NAMES, LANE_NAMES = zip(*SAMPLE_LANE)
SAMPLE_NAMES_U = sorted(set(SAMPLE_NAMES))

print(SAMPLE_NAMES_U)
rule all:
    input:
        STAR_INDEX,
        expand('qc/{sample_name}_{lane}_R1_001_fastqc.html', zip, sample_name=SAMPLE_NAMES, lane=LANE_NAMES),
        expand('preprocessed/{sample_name}/{sample_name}_{lane}_R1_001_trimmed.fq.gz', zip, sample_name=SAMPLE_NAMES, lane=LANE_NAMES),
        expand('mapped/bams/{sample_name}/{sample_name}_{lane}.bam', zip, sample_name=SAMPLE_NAMES, lane=LANE_NAMES),
        expand('mapped/merged_bams/{sample_name}.bam', sample_name=SAMPLE_NAMES),
        expand('mapped/counts_strict/byExon/{sample}.exon.counts.tsv', sample=SAMPLE_NAMES),
        expand('mapped/counts_strict/byCDS/{sample}.CDS.counts.tsv', sample=SAMPLE_NAMES),
        'multiqc_report/multiqc_report.html',
        #expand('mapped/counts_strict/{sample}.counts.tsv', sample=SAMPLE_NAMES),
        'mapped/DE_analysis/'+GENOME_BUILD+'.clone3_VS_control.all.tsv',
        #expand('mapped/tpm/{sample}.tpm.tsv', sample=SAMPLE_NAMES),


rule perform_qc:
    input:
        R1=RAWDATA_DIR+'/{sample_name}_{lane}_R1_001.fastq.gz',
    params:
        out_dir = 'qc'
    output:
       'qc/{sample_name}_{lane}_R1_001_fastqc.html',
       'qc/{sample_name}_{lane}_R1_001_fastqc.zip',
    shell:
        r'''
            fastqc -o {params.out_dir} -f fastq {input.R1}
        '''

rule perfom_trimming:
    input:
        R1=RAWDATA_DIR+'/{sample_name}_{lane}_R1_001.fastq.gz',
    params:
        out_dir='preprocessed/{sample_name}',
        phred_cutoff=5
    output:
        'preprocessed/{sample_name}/{sample_name}_{lane}_R1_001_trimmed.fq.gz',
    shell:
        r'''
            trim_galore -o {params.out_dir} -q {params.phred_cutoff} {input.R1}
        '''

"""
rule map_starlong:
    input:
        R1='preprocessed/{sample_name}/{sample_name}_{lane}_R1_001_val_1.fq.gz',
        R2='preprocessed/{sample_name}/{sample_name}_{lane}_R2_001_val_2.fq.gz',
        index=STAR_INDEX
    output: 'mapped/bams/{sample_name}/{sample_name}_{lane}.bam'
    params:
        prefix = 'mapped/bams/{sample_name}_{lane}',
        unmapped = 'unmapped/fastq/{sample_name}_{lane}',
        starlogs = 'mapped/starlogs'
    threads: 16
    shell:
        r'''
        STARlong --runThreadN {threads}\
             --genomeDir {input.index}\
             --outFileNamePrefix {params.prefix} --readFilesIn {input.R1} {input.R2}\
             --outSAMtype BAM SortedByCoordinate\
             --readFilesCommand zcat\
             --outReadsUnmapped {params.unmapped}\
            --outFilterMultimapScoreRange 20\
            --outFilterScoreMinOverLread 0\
            --outFilterMatchNminOverLread 0.66\
            --outFilterMismatchNmax 100\
            --winAnchorMultimapNmax 200\
            --seedPerReadNmax 100000 --seedPerWindowNmax 100\
            && mv {params.prefix}Aligned.sortedByCoord.out.bam {output} &&\
            mkdir -p {params.starlogs} && mv {params.prefix}Log.final.out\
            {params.prefix}Log.out {params.prefix}Log.progress.out {params.starlogs}
        '''
"""
rule map_star:
    input:
        R1='preprocessed/{sample_name}/{sample_name}_{lane}_R1_001_trimmed.fq.gz',
        index=STAR_INDEX
    output: 'mapped/bams/{sample_name}/{sample_name}_{lane}.bam'
    params:
        prefix = 'mapped/bams/{sample_name}_{lane}',
        unmapped = 'unmapped/fastq/{sample_name}_{lane}',
        starlogs = 'mapped/starlogs'
    threads: 16
    shell:
        r'''
        STAR --runThreadN {threads}\
             --genomeDir {input.index}\
             --outFileNamePrefix {params.prefix} --readFilesIn {input.R1}\
             --outSAMtype BAM SortedByCoordinate\
             --readFilesCommand zcat\
             --outReadsUnmapped {params.unmapped} && mv {params.prefix}Aligned.sortedByCoord.out.bam {output} && mkdir -p {params.starlogs} && mv {params.prefix}Log.final.out {params.prefix}Log.out {params.prefix}Log.progress.out {params.starlogs}
        '''

## See: https://software.broadinstitute.org/gatk/guide/article?id=3060
## Merging should happen post alignment
rule merge_bams:
    input: expand('mapped/bams/{{sample_name}}/{{sample_name}}_{lane}.bam', lane=set(LANE_NAMES))
    output: 'mapped/merged_bams/{sample_name}.bam'
    run:
        cmd = ' -in '.join(input)
        shell(r'''bamtools merge -in {cmd} -out {output}''')

rule sort_by_name:
    input: 'mapped/merged_bams/{sample}.bam'
    output: 'mapped/merged_bams/{sample}.sortedByName.bam'
    shell:
        r'''
            samtools sort -on {input} -T /tmp/ -o {output}
        '''

rule count_exon:
    input: 'mapped/merged_bams/{sample}.sortedByName.bam'
    params:
        annotation=GTF,
        phred_cutoff=5
    output: 'mapped/counts_strict/byExon/{sample}.exon.counts.tsv'
    shell:
        r'''
        source activate clipseq2 && htseq-count --order=name --format=bam --mode=intersection-strict --stranded=no --minaqual={params.phred_cutoff} --type=exon --idattr=gene_id {input} {params.annotation} > {output}
        '''

rule count_cds:
    input: 'mapped/merged_bams/{sample}.sortedByName.bam'
    params:
        annotation=GTF,
        phred_cutoff=5
    output: 'mapped/counts_strict/byCDS/{sample}.CDS.counts.tsv'
    shell:
        r'''
        source activate clipseq2 && htseq-count --order=name --format=bam --mode=intersection-strict --stranded=no --minaqual={params.phred_cutoff} --type=CDS --idattr=gene_id {input} {params.annotation} > {output}
        '''

rule format_counts:
    input: 'mapped/counts_strict/byExon/{sample}.exon.counts.tsv'
    output: 'mapped/counts_strict/byExon/{sample}.counts.noversion.tsv'
    shell:
        r'''
        cat {input} | sed -E 's/\.[0-9]+//' > {output}

        '''

rule run_deseq:
    input: expand('mapped/counts_strict/byExon/{sample}.counts.noversion.tsv', sample=SAMPLE_NAMES_U)
    output:
        'mapped/DE_analysis/'+GENOME_BUILD+'.clone3_VS_control.all.tsv',
        'mapped/DE_analysis/'+GENOME_BUILD+'.clone5_VS_control.sig.tsv'

    params:
        basedir = 'mapped/counts_strict/byExon',
        inprefix = 'counts.noversion',
        gene_annotations  = GENE_NAMES,
        outprefix = 'mapped/DE_analysis/'+GENOME_BUILD
    shell:
        r'''
        Rscript {SRC_DIR}/do_DE_analysis.R --basedir={params.basedir} \
            --gene_annotations={params.gene_annotations} \
            --design_file={DESIGN_FILE} \
            --outprefix={params.outprefix} \
            --inprefix={params.inprefix}

        '''


rule featurecounts:
    input: expand('mapped/merged_bams/{sample}.sortedByName.bam', sample=SAMPLE_NAMES)
    params:
        annotation=GTF
    output: 'mapped/featureCounts/fcounts.tsv'
    threads: 8
    shell:
        r'''featureCounts -a {params.annotation} -o {output} -t exon -g gene_id -Q 5 -T {threads} {input}'''


rule format_fcounts:
    input: 'mapped/featureCounts/fcounts.tsv'
    output: 'mapped/featureCounts/fcounts.noversion.tsv'
    shell:
        r'''
        cat {input} | sed -E 's/\.[0-9]+//' > {output}

        '''


rule run_picardmetrics:
    input: 'mapped/merged_bams/{sample}.bam'
    output: 'mapped/bam_metrics/{sample}.metrics'
    shell:
        r'''
        picard CollectInsertSizeMetrics I={input} H={output}.insertsize.pdf O={output}

        '''

rule create_insertsize_tsv:
    input: 'mapped/bam_metrics/{sample}.metrics'
    output: 'mapped/bam_metrics/{sample}.insertsizes.tsv'
    shell:
        r'''
        python {SRC_DIR}/collect_picard_metrics.py {input} {output}

        '''
rule counts_to_tpm:
    input:
        count = expand('mapped/counts_strict/{sample}.counts.noversion.tsv', sample=SAMPLE_NAMES),
        insert_size = expand('mapped/bam_metrics/{sample}.insertsizes.tsv', sample=SAMPLE_NAMES),
    output: 'mapped/tpm/{sample}.tpm.tsv'
    params:
        gene_lengths=GENE_LENGTHS,
        name=expand('{sample}', sample=SAMPLE_NAMES),
        outprefix='mapped/tpm',
        gene_map=GENE_NAMES
    run:
        counts_input = (',').join(input.count)
        sizes_input = (',').join(input.insert_size)
        names = (',').join(params.name)
        shell('Rscript {SRC_DIR}/counts_to_tpm.R --counts={counts_input} --insert_sizes={sizes_input} --gene_lengths={params.gene_lengths} --inprefix={names} --gene_map={params.gene_map} --outprefix={params.outprefix}')

"""
rule plot_tpm:
    input: expand('mapped/tpm/{sample}.tpm.tsv', sample=SAMPLE_NAMES)
    output: expand('mapped/plots/{sample1}_vs_{sample2}.scatter.png', sample1=SAMPLE_NAMES, sample2=SAMPLE_NAMES)
    run:
        for inp1, inp2 in zip(input, input):
            inp11 = inp1.split('/')[-1]
            inp22 = inp2.split('/')[-1]
            shell('python {SRC_DIR}/plot_tpm_scatter.py {inp1} {inp2} mapped/plots/{inp11}vs{inp22}.scatter')
"""

rule perform_qualimap_qc:
    input:  'mapped/merged_bams/{sample}.bam',
    output: 'mapped/post_mapping_qualimap/{sample}/qualimapReport.html',
    params:
        outdir='mapped/post_mapping_qualimap/{sample}',
        gtf=GTF
    shell:
        r'''
        qualimap rnaseq -bam {input} -gtf {params.gtf} --outdir {params.outdir} --java-mem-size=8G

        '''

rule get_duplication_estimate:
    input:  'mapped/merged_bams/{sample}.bam'
    output: 'mapped/post_mapping_deduplication/{sample}/output.DupRate_plot.r'
    params:
        outprefix='mapped/post_mapping_deduplication/{sample}/output'
    shell:
        r'''
        source activate clipseq2 && read_duplication.py -i {input} -o {params.outprefix}
        '''

rule run_multiqc:
    input:
        expand('qc/{sample_name}_{lane}_R1_001_fastqc.html', zip, sample_name=SAMPLE_NAMES, lane=LANE_NAMES),
        expand('mapped/post_mapping_deduplication/{sample}/output.DupRate_plot.r', sample=SAMPLE_NAMES),
        expand('mapped/post_mapping_qualimap/{sample}/qualimapReport.html', sample=SAMPLE_NAMES),
        expand('mapped/merged_bams/{sample}.bam', sample=SAMPLE_NAMES)
    output:
        'multiqc_report/multiqc_report.html'
    shell:
        'export LC_ALL=en_US.UTF-8 && multiqc -f --outdir multiqc_report .'


